(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,m=u["".concat(s,".").concat(b)]||u[b]||d[b]||o;return n?a.a.createElement(m,i(i({ref:t},p),{},{components:n})):a.a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),o=(n(0),n(101)),s={id:"koa",title:"Koa"},i={unversionedId:"server/koa",id:"server/koa",isDocsHomePage:!1,title:"Koa",description:"Koa is a web server framework designed to create backend APIs.",source:"@site/docs/server/koa.md",slug:"/server/koa",permalink:"/dev/docs/server/koa",editUrl:"https://github.com/vampiro/dev/edit/master/website/docs/server/koa.md",version:"current",sidebar:"someSidebar",previous:{title:"Starting a Server Project",permalink:"/dev/docs/server/getting-started"},next:{title:"Knex",permalink:"/dev/docs/database/knex"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Adding Code and Tests",id:"adding-code-and-tests",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Koa is a web server framework designed to create backend APIs."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"Install koa, koa-router, koa-cors, and supertest. Koa-cors will enable you to hit your API from different domains (don't install if you don't need). Supertest allows you to easily run tests on your endpoints."),Object(o.b)("p",null,"The guide below assumes you've run ",Object(o.b)("inlineCode",{parentName:"p"},"tsdx")," to generate a ",Object(o.b)("inlineCode",{parentName:"p"},"basic")," library with TypeScript, Jest, etc. (or that you've set up the build yourself already such that you have Jest and that ",Object(o.b)("inlineCode",{parentName:"p"},"npm start")," watches for changes and builds artifacts in the ",Object(o.b)("inlineCode",{parentName:"p"},"dist")," directory, also ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," ",Object(o.b)("inlineCode",{parentName:"p"},"main")," should point to your entry file in ",Object(o.b)("inlineCode",{parentName:"p"},"dist")," i.e. ",Object(o.b)("inlineCode",{parentName:"p"},'"main": "dist/index.js"')," - this will tell ",Object(o.b)("inlineCode",{parentName:"p"},"nodemon")," where to enter)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"npm install koa @koa/router @koa/cors\nnpm install -D @types/koa @types/koa__router @types/koa__cors supertest @types/supertest nodemon\n")),Object(o.b)("h2",{id:"adding-code-and-tests"},"Adding Code and Tests"),Object(o.b)("p",null,"Adapted from ",Object(o.b)("a",{parentName:"p",href:"https://medium.com/scrum-ai/4-testing-koa-server-with-jest-week-5-8e980cd30527"},"this article"),"."),Object(o.b)("p",null,"In ",Object(o.b)("inlineCode",{parentName:"p"},"src/index.ts")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'import app from "./app";\n\nconst port = process.env.PORT || 3001;\napp.listen(port);\nconsole.info(`Listening to http://localhost:${port} \ud83d\ude80`);\n')),Object(o.b)("p",null,"In ",Object(o.b)("inlineCode",{parentName:"p"},"src/app.ts")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'import Koa from "koa";\nimport Router from "@koa/router";\nimport cors from "@koa/cors";\n\nconst app = new Koa();\nconst router = new Router();\n\nrouter.get("/", (ctx: Koa.Context) => {\n  ctx.body = "Hello World!!";\n});\n\napp.use(cors()); // if clients can be from a different domain\napp.use(router.routes());\n\nexport default app;\n')),Object(o.b)("p",null,"In ",Object(o.b)("inlineCode",{parentName:"p"},"test/app.test.ts")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'import request from "supertest";\nimport app from "../src/app";\n\ntest("Hello world works", async () => {\n  const response = await request(app.callback()).get("/");\n  expect(response.status).toBe(200);\n  expect(response.text).toBe("Hello World");\n});\n')),Object(o.b)("p",null,"You should now be able to run the tests with ",Object(o.b)("inlineCode",{parentName:"p"},"npm run test")," to test your endpoint."),Object(o.b)("p",null,"In order to run your server you can run ",Object(o.b)("inlineCode",{parentName:"p"},"npm start")," and ",Object(o.b)("inlineCode",{parentName:"p"},"node dist/index.js"),".\nTo run in development with changes being watched and automatic restarts, you'll need to add the following to your ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," ",Object(o.b)("inlineCode",{parentName:"p"},"scripts")," section."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'"serve": "nodemon"\n')),Object(o.b)("p",null,"Then you can run this in one terminal (runs the build in a watch mode):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"npm start\n")),Object(o.b)("p",null,"and this in another (runs the built server code from the dist directory and restarts server after any changes):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"npm run serve\n")),Object(o.b)("p",null,"You should now be able to hit the endpoint via ",Object(o.b)("inlineCode",{parentName:"p"},"localhost"),"."))}l.isMDXComponent=!0}}]);