(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),u=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=u(n),b=r,m=s["".concat(o,".").concat(b)]||s[b]||d[b]||i;return n?a.a.createElement(m,l(l({ref:t},p),{},{components:n})):a.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),i=(n(0),n(101)),o={id:"gql",title:"gql"},l={unversionedId:"database/gql",id:"database/gql",isDocsHomePage:!1,title:"gql",description:"Fauna",source:"@site/docs/database/gql.md",slug:"/database/gql",permalink:"/dev/docs/database/gql",editUrl:"https://github.com/vampiro/dev/edit/master/website/docs/database/gql.md",version:"current",sidebar:"someSidebar",previous:{title:"Knex",permalink:"/dev/docs/database/knex"},next:{title:"Auth0",permalink:"/dev/docs/auth/auth0"}},c=[],p={toc:c};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"fauna"},"Fauna"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Make a database in Fauna"),Object(i.b)("li",{parentName:"ol"},"Create a basic schema.gql in this project"),Object(i.b)("li",{parentName:"ol"},"Upload schema to Fauna. Fauna will add in create, update, and delete mutations as well as a read query. You will be responsible for adding in additional queries/mutations to the originating schema."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"npm install graphql graphql-request")," and ",Object(i.b)("inlineCode",{parentName:"li"},"npm install -D @graphql-codegen/cli @graphql-codegen/introspection @graphql-codegen/typescript-graphql-request @graphql-codegen/typescript-operations dotenv")),Object(i.b)("li",{parentName:"ol"},"Create your queries in a queries.gql file (or multiple gql files - however you want to organize)."),Object(i.b)("li",{parentName:"ol"},"Add this to package.json npm scripts ",Object(i.b)("inlineCode",{parentName:"li"},'gql-codegen": "gql-codegen -r dotenv/config')),Object(i.b)("li",{parentName:"ol"},"Create the ",Object(i.b)("inlineCode",{parentName:"li"},"codegen.yml")," file. This file will link to your Fauna database secret (add to a .env file). This file will have a ",Object(i.b)("inlineCode",{parentName:"li"},"documents")," attribute in it which says what queries it's going to document (queries.gql)."),Object(i.b)("li",{parentName:"ol"},"Run ",Object(i.b)("inlineCode",{parentName:"li"},"npm run gql-codegen"),". This will generate a typescript file that has function definitions for the queries (from queries.gql) and type definitions for what they take in/ output."),Object(i.b)("li",{parentName:"ol"},"Query Fauna with the functions codegen created.")))}u.isMDXComponent=!0}}]);