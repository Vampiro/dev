(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{84:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var o=t(3),a=t(7),r=(t(0),t(101)),i={id:"electron",title:"Electron w/ CRA"},l={unversionedId:"electron",id:"electron",isDocsHomePage:!1,title:"Electron w/ CRA",description:"Instructions from this post.",source:"@site/docs/electron.md",slug:"/electron",permalink:"/dev/docs/electron",editUrl:"https://github.com/vampiro/dev/edit/master/website/docs/electron.md",version:"current",sidebar:"someSidebar",previous:{title:"Create React App",permalink:"/dev/docs/"}},c=[],s={toc:c};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Instructions from ",Object(r.b)("a",{parentName:"p",href:"https://dev.to/mandiwise/electron-apps-made-easy-with-create-react-app-and-electron-forge-560e"},"this post"),"."),Object(r.b)("p",null,"Install the following packages within your React app."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"npm i electron-is-dev\nnpm i -D concurrently cross-env electron electron-devtools-installer wait-on\n")),Object(r.b)("p",null,"Add the following to ",Object(r.b)("inlineCode",{parentName:"p"},"public/electron.js")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'const path = require("path");\n\nconst { app, BrowserWindow } = require("electron");\nconst isDev = require("electron-is-dev");\n\n// Conditionally include the dev tools installer to load React Dev Tools\nlet installExtension, REACT_DEVELOPER_TOOLS;\n\nif (isDev) {\n  const devTools = require("electron-devtools-installer");\n  installExtension = devTools.default;\n  REACT_DEVELOPER_TOOLS = devTools.REACT_DEVELOPER_TOOLS;\n}\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling\nif (require("electron-squirrel-startup")) {\n  app.quit();\n}\n\nfunction createWindow() {\n  // Create the browser window.\n  const win = new BrowserWindow({\n    width: 1600,\n    height: 900,\n    webPreferences: {\n      nodeIntegration: true,\n    },\n  });\n\n  win.removeMenu();\n\n  // and load the index.html of the app.\n  // win.loadFile("index.html");\n  win.loadURL(\n    isDev\n      ? "http://localhost:3000"\n      : `file://${path.join(__dirname, "../build/index.html")}`\n  );\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow();\n\n  if (isDev) {\n    installExtension(REACT_DEVELOPER_TOOLS)\n      .then((name) => console.log(`Added Extension:  ${name}`))\n      .catch((error) => console.log(`An error occurred: , ${error}`));\n  }\n});\n\n// Quit when all windows are closed, except on macOS. There, it\'s common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on("window-all-closed", () => {\n  if (process.platform !== "darwin") {\n    app.quit();\n  }\n});\n\napp.on("activate", () => {\n  // On macOS it\'s common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app\'s specific main process\n// code. You can also put them in separate files and require them here.\n')),Object(r.b)("p",null,"Add these lines to your ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'"main": "public/electron.js",\n"homepage": "./",\n')),Object(r.b)("p",null,"Add these lines to the ",Object(r.b)("inlineCode",{parentName:"p"},"scripts")," section of your ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'"dev": "concurrently -k \\"cross-env BROWSER=none npm start\\" \\"npm:electron\\"",\n"electron": "wait-on tcp:3000 && electron ."\n')),Object(r.b)("p",null,"Run the following. It will add some ",Object(r.b)("inlineCode",{parentName:"p"},"dev-dependencies")," for building, a couple of ",Object(r.b)("inlineCode",{parentName:"p"},"scripts")," in ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),", and an Electron-Forge config in ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-sh"},"npx @electron-forge/cli import\n")),Object(r.b)("p",null,"This changes the ",Object(r.b)("inlineCode",{parentName:"p"},"start")," script in ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),". Change ",Object(r.b)("inlineCode",{parentName:"p"},"start")," back to this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'"start": "react-scripts start",\n')),Object(r.b)("p",null,"At this point if you run your app in Electron in dev mode with:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"npm run dev\n")),Object(r.b)("p",null,"If you get an error saying ",Object(r.b)("inlineCode",{parentName:"p"},"'electron' is not recognized as an internal or external command"),", you can try re-installing your ",Object(r.b)("inlineCode",{parentName:"p"},"node_modules"),". Unsure why this problem happens, but it may be a problem with Windows + VS Code + Git Bash."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"rm -rf node_modules\nnpm install\nnpm run dev\n")))}p.isMDXComponent=!0}}]);