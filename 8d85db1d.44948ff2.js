(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(3),o=t(7),r=(t(0),t(99)),i={id:"electron",title:"Electron w/ CRA"},c={unversionedId:"react/electron",id:"react/electron",isDocsHomePage:!1,title:"Electron w/ CRA",description:"This quick start guide will show you how to add Electron into an existing app created with create-react-app. Some of these instructions are from this post. I've updated the instructions for Electron v12.0.0 and added some additional steps for usage.",source:"@site/docs/react/electron.md",slug:"/react/electron",permalink:"/dev/docs/react/electron",editUrl:"https://github.com/vampiro/dev/edit/master/website/docs/react/electron.md",version:"current",sidebar:"someSidebar",previous:{title:"Create App",permalink:"/dev/docs/"},next:{title:"Starting a Server Project",permalink:"/dev/docs/server/getting-started"}},l=[{value:"Setup",id:"setup",children:[]},{value:"Running in Dev Mode",id:"running-in-dev-mode",children:[]},{value:"Production Build",id:"production-build",children:[]},{value:"Accessing the Filesystem in Electron",id:"accessing-the-filesystem-in-electron",children:[]},{value:"Next Steps",id:"next-steps",children:[]}],s={toc:l};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This quick start guide will show you how to add Electron into an existing app created with ",Object(r.b)("inlineCode",{parentName:"p"},"create-react-app"),". Some of these instructions are from ",Object(r.b)("a",{parentName:"p",href:"https://dev.to/mandiwise/electron-apps-made-easy-with-create-react-app-and-electron-forge-560e"},"this post"),". I've updated the instructions for Electron v12.0.0 and added some additional steps for usage."),Object(r.b)("h2",{id:"setup"},"Setup"),Object(r.b)("p",null,"Install the following packages within your React app."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"npm i electron-is-dev@2.0.0\nnpm i -D concurrently cross-env electron@12.0.0 electron-devtools-installer@3.1.1 wait-on\n")),Object(r.b)("p",null,"Add the following to ",Object(r.b)("inlineCode",{parentName:"p"},"public/electron.js")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'const path = require("path");\n\nconst { app, BrowserWindow } = require("electron");\nconst isDev = require("electron-is-dev");\n\n// Conditionally include the dev tools installer to load React Dev Tools\nlet installExtension, REACT_DEVELOPER_TOOLS;\n\nif (isDev) {\n  const devTools = require("electron-devtools-installer");\n  installExtension = devTools.default;\n  REACT_DEVELOPER_TOOLS = devTools.REACT_DEVELOPER_TOOLS;\n}\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling\nif (require("electron-squirrel-startup")) {\n  app.quit();\n}\n\nfunction createWindow() {\n  // Create the browser window.\n  const win = new BrowserWindow({\n    width: 1600,\n    height: 900,\n    webPreferences: {\n      nodeIntegration: true,\n    },\n  });\n\n  // remove top menu (File, Edit, View, etc.)\n  win.removeMenu();\n\n  // Open the DevTools.\n  if (isDev) {\n    win.webContents.once("dom-ready", () => {\n      win.webContents.openDevTools({ mode: "detach" });\n    });\n  }\n\n  // and load the index.html of the app.\n  // win.loadFile("index.html");\n  win.loadURL(\n    isDev\n      ? "http://localhost:3000"\n      : `file://${path.join(__dirname, "../build/index.html")}`\n  );\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow();\n\n  if (isDev) {\n    installExtension(REACT_DEVELOPER_TOOLS)\n      .then((name) => console.log(`Added Extension:  ${name}`))\n      .catch((error) => console.log(`An error occurred: , ${error}`));\n  }\n});\n\n// Quit when all windows are closed, except on macOS. There, it\'s common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on("window-all-closed", () => {\n  if (process.platform !== "darwin") {\n    app.quit();\n  }\n});\n\napp.on("activate", () => {\n  // On macOS it\'s common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app\'s specific main process\n// code. You can also put them in separate files and require them here.\n')),Object(r.b)("p",null,"Add these lines to your ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),". Fill in the ",Object(r.b)("inlineCode",{parentName:"p"},"author")," and ",Object(r.b)("inlineCode",{parentName:"p"},"description")," fields."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'"author": "",\n"description": "",\n"main": "public/electron.js",\n"homepage": "./",\n')),Object(r.b)("p",null,"Add these lines to the ",Object(r.b)("inlineCode",{parentName:"p"},"scripts")," section of your ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'"dev": "concurrently -k \\"cross-env BROWSER=none npm start\\" \\"npm:electron\\"",\n"electron": "wait-on tcp:3000 && electron-forge start",\n')),Object(r.b)("p",null,"Run the following. It will add some ",Object(r.b)("inlineCode",{parentName:"p"},"dev-dependencies")," for building, a couple of ",Object(r.b)("inlineCode",{parentName:"p"},"scripts")," in ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),", and an Electron-Forge config in ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"npx @electron-forge/cli import\n")),Object(r.b)("p",null,"This changes the ",Object(r.b)("inlineCode",{parentName:"p"},"start")," script in ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),". Within the ",Object(r.b)("inlineCode",{parentName:"p"},"scripts")," in ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),", change ",Object(r.b)("inlineCode",{parentName:"p"},"start"),", ",Object(r.b)("inlineCode",{parentName:"p"},"package"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"make")," to the following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'"start": "react-scripts start",\n"package": "npm run build && electron-forge package",\n"make": "npm run build && electron-forge make"\n')),Object(r.b)("p",null,"Add ",Object(r.b)("inlineCode",{parentName:"p"},"/out")," to your ",Object(r.b)("inlineCode",{parentName:"p"},".gitignore")," if it isn't already there."),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")," there should be a ",Object(r.b)("inlineCode",{parentName:"p"},"config.forge.packagerConfig")," object. Add the following to ",Object(r.b)("inlineCode",{parentName:"p"},"packagerConfig"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'"asar": true,\n"name": "YOUR APP NAME"\n')),Object(r.b)("h2",{id:"running-in-dev-mode"},"Running in Dev Mode"),Object(r.b)("p",null,"At this point you can run your app in Electron in dev mode with:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),Object(r.b)("p",null,"If you get an error saying ",Object(r.b)("inlineCode",{parentName:"p"},"'electron' is not recognized as an internal or external command"),", you can try re-installing your ",Object(r.b)("inlineCode",{parentName:"p"},"node_modules"),". Unsure why this problem happens, but it may be a problem with Windows + VS Code + Git Bash."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"rm -rf node_modules\nnpm install\nnpm run dev\n")),Object(r.b)("h2",{id:"production-build"},"Production Build"),Object(r.b)("p",null,"To package your application so that it can be executed run:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"npm run make\n")),Object(r.b)("p",null,"Your built app should be in the ",Object(r.b)("inlineCode",{parentName:"p"},"out")," directory e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"out/MY APP-win32-x64/MY APP.exe")),Object(r.b)("h2",{id:"accessing-the-filesystem-in-electron"},"Accessing the Filesystem in Electron"),Object(r.b)("p",null,"If you want access to things like the filesystem from within your React code in CRA, you're going to have to do some extra work. Install the following package. This allows you to somewhat edit the webpack config without requiring you to ",Object(r.b)("inlineCode",{parentName:"p"},"eject"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"npm install @craco/craco\n")),Object(r.b)("p",null,"Create ",Object(r.b)("inlineCode",{parentName:"p"},"craco.config.js")," at the root of your project and fill it with:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  webpack: {\n    configure: {\n      target: "electron-renderer",\n    },\n  },\n};\n')),Object(r.b)("p",null,"Change/add the following ",Object(r.b)("inlineCode",{parentName:"p"},"scripts")," in your ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'"electron-start": "craco start",\n"electron-build": "craco build",\n"electron-test": "craco test",\n"dev": "concurrently -k \\"cross-env BROWSER=none npm run electron-start\\" \\"npm:electron\\"",\n"package": "npm run electron-build && electron-forge package",\n"make": "npm run electron-build && electron-forge make"\n')),Object(r.b)("p",null,"In your ",Object(r.b)("inlineCode",{parentName:"p"},"public/electron.js")," file, ensure that the ",Object(r.b)("inlineCode",{parentName:"p"},"BrowserWindow")," that gets created contains the following (specifically the ",Object(r.b)("inlineCode",{parentName:"p"},"webPreferences")," settings):"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"const win = new BrowserWindow({\n  width: 1600,\n  height: 900,\n  webPreferences: {\n    nodeIntegration: true,\n    contextIsolation: false,\n    enableRemoteModule: true,\n  },\n});\n")),Object(r.b)("p",null,"If you want to support both web and desktop versions and you want to distinguish whether you're running in Electron vs. the web at run-time so you can turn certain features off, install the following package."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},'npm install "is-electron"\n')),Object(r.b)("p",null,"You can now have a component that has access to things on the filesystem. ",Object(r.b)("a",{parentName:"p",href:"https://github.com/electron/electron/blob/v1.1.0/docs/api/app.md#appgetpathname"},"Here's")," a list of paths available to you."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},'import isElectron from "is-electron";\n\nexport default function DirectoryPaths() {\n  if (isElectron()) {\n    const { remote } = require("electron");\n    const { app } = remote;\n    return (\n      <div>\n        <div>This is running in Electron!</div>\n        <div>User Home Directory: {app.getPath("home")}</div>\n        <div>App Directory: {app.getPath("appData")}</div>\n        <div>User Data Directory: {app.getPath("userData")}</div>\n        <div>User Desktop: {app.getPath("desktop")}</div>\n      </div>\n    );\n  }\n\n  return <div>This is not running in Electron :-(</div>;\n}\n')),Object(r.b)("h2",{id:"next-steps"},"Next Steps"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Custom Icons (docs here: ",Object(r.b)("a",{parentName:"li",href:"https://dev.to/mandiwise/electron-apps-made-easy-with-create-react-app-and-electron-forge-560e"},"https://dev.to/mandiwise/electron-apps-made-easy-with-create-react-app-and-electron-forge-560e"),")")))}p.isMDXComponent=!0}}]);